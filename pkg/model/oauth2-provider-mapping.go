// Code generated by apbr generate. DO NOT EDIT.
// versions:
// 	apbr generate v1.2

//go:build !codeanalysis

package model

import (
	"github.com/apibrew/apibrew/pkg/abs"
	"github.com/apibrew/apibrew/pkg/formats/unstructured"
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
	"google.golang.org/protobuf/types/known/structpb"
)

import "github.com/google/uuid"

type Oauth2ProviderMapper struct {
}

func NewOauth2ProviderMapper() *Oauth2ProviderMapper {
	return &Oauth2ProviderMapper{}
}

var Oauth2ProviderMapperInstance = NewOauth2ProviderMapper()

func (m *Oauth2ProviderMapper) New() *Oauth2Provider {
	return &Oauth2Provider{}
}

func (m *Oauth2ProviderMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "sso",
		Name:      "Oauth2Provider",
	}
}

func (m *Oauth2ProviderMapper) ToRecord(oauth2Provider *Oauth2Provider) *model.Record {
	var rec = &model.Record{}
	rec.Properties = m.ToProperties(oauth2Provider)
	return rec
}

func (m *Oauth2ProviderMapper) FromRecord(record *model.Record) *Oauth2Provider {
	return m.FromProperties(record.Properties)
}

func (m *Oauth2ProviderMapper) ToProperties(oauth2Provider *Oauth2Provider) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Id := oauth2Provider.Id

	if var_Id != nil {
		var var_Id_mapped *structpb.Value

		var var_Id_err error
		var_Id_mapped, var_Id_err = types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(*var_Id)
		if var_Id_err != nil {
			panic(var_Id_err)
		}
		properties["id"] = var_Id_mapped
	}

	var_DefaultScopes := oauth2Provider.DefaultScopes

	if var_DefaultScopes != nil {
		var var_DefaultScopes_mapped *structpb.Value

		var var_DefaultScopes_l []*structpb.Value
		for _, value := range var_DefaultScopes {

			var_5x := value
			var var_5x_mapped *structpb.Value

			var var_5x_err error
			var_5x_mapped, var_5x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_5x)
			if var_5x_err != nil {
				panic(var_5x_err)
			}

			var_DefaultScopes_l = append(var_DefaultScopes_l, var_5x_mapped)
		}
		var_DefaultScopes_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_DefaultScopes_l})
		properties["defaultScopes"] = var_DefaultScopes_mapped
	}

	var_Name := oauth2Provider.Name

	var var_Name_mapped *structpb.Value

	var var_Name_err error
	var_Name_mapped, var_Name_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Name)
	if var_Name_err != nil {
		panic(var_Name_err)
	}
	properties["name"] = var_Name_mapped

	var_AuthUrl := oauth2Provider.AuthUrl

	var var_AuthUrl_mapped *structpb.Value

	var var_AuthUrl_err error
	var_AuthUrl_mapped, var_AuthUrl_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_AuthUrl)
	if var_AuthUrl_err != nil {
		panic(var_AuthUrl_err)
	}
	properties["authUrl"] = var_AuthUrl_mapped

	var_TokenUrl := oauth2Provider.TokenUrl

	var var_TokenUrl_mapped *structpb.Value

	var var_TokenUrl_err error
	var_TokenUrl_mapped, var_TokenUrl_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_TokenUrl)
	if var_TokenUrl_err != nil {
		panic(var_TokenUrl_err)
	}
	properties["tokenUrl"] = var_TokenUrl_mapped

	var_UserInfoUrl := oauth2Provider.UserInfoUrl

	var var_UserInfoUrl_mapped *structpb.Value

	var var_UserInfoUrl_err error
	var_UserInfoUrl_mapped, var_UserInfoUrl_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_UserInfoUrl)
	if var_UserInfoUrl_err != nil {
		panic(var_UserInfoUrl_err)
	}
	properties["userInfoUrl"] = var_UserInfoUrl_mapped

	var_UserInfoExtractConfig := oauth2Provider.UserInfoExtractConfig

	if var_UserInfoExtractConfig != nil {
		var var_UserInfoExtractConfig_mapped *structpb.Value

		var_UserInfoExtractConfig_mapped = structpb.NewStructValue(&structpb.Struct{Fields: Oauth2ProviderUserInfoExtractMapperInstance.ToProperties(var_UserInfoExtractConfig)})
		properties["userInfoExtractConfig"] = var_UserInfoExtractConfig_mapped
	}

	var_Version := oauth2Provider.Version

	var var_Version_mapped *structpb.Value

	var var_Version_err error
	var_Version_mapped, var_Version_err = types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(var_Version)
	if var_Version_err != nil {
		panic(var_Version_err)
	}
	properties["version"] = var_Version_mapped
	return properties
}

func (m *Oauth2ProviderMapper) FromProperties(properties map[string]*structpb.Value) *Oauth2Provider {
	var s = m.New()
	if properties["id"] != nil && properties["id"].AsInterface() != nil {

		var_Id := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_Id)

		if err != nil {
			panic(err)
		}

		var_Id_mapped := new(uuid.UUID)
		*var_Id_mapped = val.(uuid.UUID)

		s.Id = var_Id_mapped
	}
	if properties["defaultScopes"] != nil && properties["defaultScopes"].AsInterface() != nil {

		var_DefaultScopes := properties["defaultScopes"]
		var_DefaultScopes_mapped := []string{}
		for _, v := range var_DefaultScopes.GetListValue().Values {

			var_4x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_4x)

			if err != nil {
				panic(err)
			}

			var_4x_mapped := val.(string)

			var_DefaultScopes_mapped = append(var_DefaultScopes_mapped, var_4x_mapped)
		}

		s.DefaultScopes = var_DefaultScopes_mapped
	}
	if properties["name"] != nil && properties["name"].AsInterface() != nil {

		var_Name := properties["name"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Name)

		if err != nil {
			panic(err)
		}

		var_Name_mapped := val.(string)

		s.Name = var_Name_mapped
	}
	if properties["authUrl"] != nil && properties["authUrl"].AsInterface() != nil {

		var_AuthUrl := properties["authUrl"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_AuthUrl)

		if err != nil {
			panic(err)
		}

		var_AuthUrl_mapped := val.(string)

		s.AuthUrl = var_AuthUrl_mapped
	}
	if properties["tokenUrl"] != nil && properties["tokenUrl"].AsInterface() != nil {

		var_TokenUrl := properties["tokenUrl"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_TokenUrl)

		if err != nil {
			panic(err)
		}

		var_TokenUrl_mapped := val.(string)

		s.TokenUrl = var_TokenUrl_mapped
	}
	if properties["userInfoUrl"] != nil && properties["userInfoUrl"].AsInterface() != nil {

		var_UserInfoUrl := properties["userInfoUrl"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_UserInfoUrl)

		if err != nil {
			panic(err)
		}

		var_UserInfoUrl_mapped := val.(string)

		s.UserInfoUrl = var_UserInfoUrl_mapped
	}
	if properties["userInfoExtractConfig"] != nil && properties["userInfoExtractConfig"].AsInterface() != nil {

		var_UserInfoExtractConfig := properties["userInfoExtractConfig"]
		var mappedValue = Oauth2ProviderUserInfoExtractMapperInstance.FromProperties(var_UserInfoExtractConfig.GetStructValue().Fields)

		var_UserInfoExtractConfig_mapped := mappedValue

		s.UserInfoExtractConfig = var_UserInfoExtractConfig_mapped
	}
	if properties["version"] != nil && properties["version"].AsInterface() != nil {

		var_Version := properties["version"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Version)

		if err != nil {
			panic(err)
		}

		var_Version_mapped := val.(int32)

		s.Version = var_Version_mapped
	}
	return s
}

func (m *Oauth2ProviderMapper) ToUnstructured(oauth2Provider *Oauth2Provider) unstructured.Unstructured {
	var properties unstructured.Unstructured = make(unstructured.Unstructured)
	properties["type"] = "sso/Oauth2Provider"

	var_Id := oauth2Provider.Id

	if var_Id != nil {
		var var_Id_mapped interface{}

		var_Id_mapped = var_Id.String()
		properties["id"] = var_Id_mapped
	}

	var_DefaultScopes := oauth2Provider.DefaultScopes

	if var_DefaultScopes != nil {
		var var_DefaultScopes_mapped interface{}

		var var_DefaultScopes_l []interface{}
		for _, value := range var_DefaultScopes {

			var_5x := value
			var var_5x_mapped interface{}

			var_5x_mapped = var_5x

			var_DefaultScopes_l = append(var_DefaultScopes_l, var_5x_mapped)
		}
		var_DefaultScopes_mapped = var_DefaultScopes_l
		properties["defaultScopes"] = var_DefaultScopes_mapped
	}

	var_Name := oauth2Provider.Name

	var var_Name_mapped interface{}

	var_Name_mapped = var_Name
	properties["name"] = var_Name_mapped

	var_AuthUrl := oauth2Provider.AuthUrl

	var var_AuthUrl_mapped interface{}

	var_AuthUrl_mapped = var_AuthUrl
	properties["authUrl"] = var_AuthUrl_mapped

	var_TokenUrl := oauth2Provider.TokenUrl

	var var_TokenUrl_mapped interface{}

	var_TokenUrl_mapped = var_TokenUrl
	properties["tokenUrl"] = var_TokenUrl_mapped

	var_UserInfoUrl := oauth2Provider.UserInfoUrl

	var var_UserInfoUrl_mapped interface{}

	var_UserInfoUrl_mapped = var_UserInfoUrl
	properties["userInfoUrl"] = var_UserInfoUrl_mapped

	var_UserInfoExtractConfig := oauth2Provider.UserInfoExtractConfig

	if var_UserInfoExtractConfig != nil {
		var var_UserInfoExtractConfig_mapped interface{}

		var_UserInfoExtractConfig_mapped = Oauth2ProviderUserInfoExtractMapperInstance.ToUnstructured(var_UserInfoExtractConfig)
		properties["userInfoExtractConfig"] = var_UserInfoExtractConfig_mapped
	}

	var_Version := oauth2Provider.Version

	var var_Version_mapped interface{}

	var_Version_mapped = var_Version
	properties["version"] = var_Version_mapped

	return properties
}

type Oauth2ProviderUserInfoExtractMapper struct {
}

func NewOauth2ProviderUserInfoExtractMapper() *Oauth2ProviderUserInfoExtractMapper {
	return &Oauth2ProviderUserInfoExtractMapper{}
}

var Oauth2ProviderUserInfoExtractMapperInstance = NewOauth2ProviderUserInfoExtractMapper()

func (m *Oauth2ProviderUserInfoExtractMapper) New() *Oauth2ProviderUserInfoExtract {
	return &Oauth2ProviderUserInfoExtract{}
}

func (m *Oauth2ProviderUserInfoExtractMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "sso",
		Name:      "Oauth2Provider",
	}
}

func (m *Oauth2ProviderUserInfoExtractMapper) ToProperties(oauth2ProviderUserInfoExtract *Oauth2ProviderUserInfoExtract) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Username := oauth2ProviderUserInfoExtract.Username

	if var_Username != nil {
		var var_Username_mapped *structpb.Value

		var var_Username_err error
		var_Username_mapped, var_Username_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_Username)
		if var_Username_err != nil {
			panic(var_Username_err)
		}
		properties["username"] = var_Username_mapped
	}
	return properties
}

func (m *Oauth2ProviderUserInfoExtractMapper) FromProperties(properties map[string]*structpb.Value) *Oauth2ProviderUserInfoExtract {
	var s = m.New()
	if properties["username"] != nil && properties["username"].AsInterface() != nil {

		var_Username := properties["username"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Username)

		if err != nil {
			panic(err)
		}

		var_Username_mapped := new(string)
		*var_Username_mapped = val.(string)

		s.Username = var_Username_mapped
	}
	return s
}

func (m *Oauth2ProviderUserInfoExtractMapper) ToUnstructured(oauth2ProviderUserInfoExtract *Oauth2ProviderUserInfoExtract) unstructured.Unstructured {
	var properties unstructured.Unstructured = make(unstructured.Unstructured)

	var_Username := oauth2ProviderUserInfoExtract.Username

	if var_Username != nil {
		var var_Username_mapped interface{}

		var_Username_mapped = *var_Username
		properties["username"] = var_Username_mapped
	}

	return properties
}
