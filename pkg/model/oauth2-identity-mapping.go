// Code generated by apbr generate. DO NOT EDIT.
// versions:
// 	apbr generate v1.2

//go:build !codeanalysis

package model

import (
	"github.com/apibrew/apibrew/pkg/abs"
	"github.com/apibrew/apibrew/pkg/formats/unstructured"
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
	"google.golang.org/protobuf/types/known/structpb"
)

import "github.com/google/uuid"
import "time"

type Oauth2IdentityMapper struct {
}

func NewOauth2IdentityMapper() *Oauth2IdentityMapper {
	return &Oauth2IdentityMapper{}
}

var Oauth2IdentityMapperInstance = NewOauth2IdentityMapper()

func (m *Oauth2IdentityMapper) New() *Oauth2Identity {
	return &Oauth2Identity{}
}

func (m *Oauth2IdentityMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "sso",
		Name:      "Oauth2Identity",
	}
}

func (m *Oauth2IdentityMapper) ToRecord(oauth2Identity *Oauth2Identity) *model.Record {
	var rec = &model.Record{}
	rec.Properties = m.ToProperties(oauth2Identity)
	return rec
}

func (m *Oauth2IdentityMapper) FromRecord(record *model.Record) *Oauth2Identity {
	return m.FromProperties(record.Properties)
}

func (m *Oauth2IdentityMapper) ToProperties(oauth2Identity *Oauth2Identity) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Id := oauth2Identity.Id

	if var_Id != nil {
		var var_Id_mapped *structpb.Value

		var var_Id_err error
		var_Id_mapped, var_Id_err = types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(*var_Id)
		if var_Id_err != nil {
			panic(var_Id_err)
		}
		properties["id"] = var_Id_mapped
	}

	var_Username := oauth2Identity.Username

	var var_Username_mapped *structpb.Value

	var var_Username_err error
	var_Username_mapped, var_Username_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Username)
	if var_Username_err != nil {
		panic(var_Username_err)
	}
	properties["username"] = var_Username_mapped

	var_Details := oauth2Identity.Details

	var var_Details_mapped *structpb.Value

	var var_Details_err error
	var_Details_mapped, var_Details_err = types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_Details)
	if var_Details_err != nil {
		panic(var_Details_err)
	}
	properties["details"] = var_Details_mapped

	var_Config := oauth2Identity.Config

	if var_Config != nil {
		var var_Config_mapped *structpb.Value

		var_Config_mapped = structpb.NewStructValue(&structpb.Struct{Fields: Oauth2ConfigMapperInstance.ToProperties(var_Config)})
		properties["config"] = var_Config_mapped
	}

	var_Version := oauth2Identity.Version

	var var_Version_mapped *structpb.Value

	var var_Version_err error
	var_Version_mapped, var_Version_err = types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(var_Version)
	if var_Version_err != nil {
		panic(var_Version_err)
	}
	properties["version"] = var_Version_mapped

	var_AuditData := oauth2Identity.AuditData

	if var_AuditData != nil {
		var var_AuditData_mapped *structpb.Value

		var_AuditData_mapped = structpb.NewStructValue(&structpb.Struct{Fields: Oauth2IdentityAuditDataMapperInstance.ToProperties(var_AuditData)})
		properties["auditData"] = var_AuditData_mapped
	}
	return properties
}

func (m *Oauth2IdentityMapper) FromProperties(properties map[string]*structpb.Value) *Oauth2Identity {
	var s = m.New()
	if properties["id"] != nil && properties["id"].AsInterface() != nil {

		var_Id := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_Id)

		if err != nil {
			panic(err)
		}

		var_Id_mapped := new(uuid.UUID)
		*var_Id_mapped = val.(uuid.UUID)

		s.Id = var_Id_mapped
	}
	if properties["username"] != nil && properties["username"].AsInterface() != nil {

		var_Username := properties["username"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Username)

		if err != nil {
			panic(err)
		}

		var_Username_mapped := val.(string)

		s.Username = var_Username_mapped
	}
	if properties["details"] != nil && properties["details"].AsInterface() != nil {

		var_Details := properties["details"]
		var_Details_mapped := unstructured.FromValue(var_Details)

		s.Details = var_Details_mapped
	}
	if properties["config"] != nil && properties["config"].AsInterface() != nil {

		var_Config := properties["config"]
		var_Config_mapped := Oauth2ConfigMapperInstance.FromProperties(var_Config.GetStructValue().Fields)

		s.Config = var_Config_mapped
	}
	if properties["version"] != nil && properties["version"].AsInterface() != nil {

		var_Version := properties["version"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Version)

		if err != nil {
			panic(err)
		}

		var_Version_mapped := val.(int32)

		s.Version = var_Version_mapped
	}
	if properties["auditData"] != nil && properties["auditData"].AsInterface() != nil {

		var_AuditData := properties["auditData"]
		var mappedValue = Oauth2IdentityAuditDataMapperInstance.FromProperties(var_AuditData.GetStructValue().Fields)

		var_AuditData_mapped := mappedValue

		s.AuditData = var_AuditData_mapped
	}
	return s
}

func (m *Oauth2IdentityMapper) ToUnstructured(oauth2Identity *Oauth2Identity) unstructured.Unstructured {
	var properties unstructured.Unstructured = make(unstructured.Unstructured)
	properties["type"] = "sso/Oauth2Identity"

	var_Id := oauth2Identity.Id

	if var_Id != nil {
		var var_Id_mapped interface{}

		var_Id_mapped = var_Id.String()
		properties["id"] = var_Id_mapped
	}

	var_Username := oauth2Identity.Username

	var var_Username_mapped interface{}

	var_Username_mapped = var_Username
	properties["username"] = var_Username_mapped

	var_Details := oauth2Identity.Details

	var var_Details_mapped interface{}

	var_Details_mapped = var_Details
	properties["details"] = var_Details_mapped

	var_Config := oauth2Identity.Config

	if var_Config != nil {
		var var_Config_mapped interface{}

		var_Config_mapped = Oauth2ConfigMapperInstance.ToUnstructured(var_Config)
		properties["config"] = var_Config_mapped
	}

	var_Version := oauth2Identity.Version

	var var_Version_mapped interface{}

	var_Version_mapped = var_Version
	properties["version"] = var_Version_mapped

	var_AuditData := oauth2Identity.AuditData

	if var_AuditData != nil {
		var var_AuditData_mapped interface{}

		var_AuditData_mapped = Oauth2IdentityAuditDataMapperInstance.ToUnstructured(var_AuditData)
		properties["auditData"] = var_AuditData_mapped
	}

	return properties
}

type Oauth2IdentityAuditDataMapper struct {
}

func NewOauth2IdentityAuditDataMapper() *Oauth2IdentityAuditDataMapper {
	return &Oauth2IdentityAuditDataMapper{}
}

var Oauth2IdentityAuditDataMapperInstance = NewOauth2IdentityAuditDataMapper()

func (m *Oauth2IdentityAuditDataMapper) New() *Oauth2IdentityAuditData {
	return &Oauth2IdentityAuditData{}
}

func (m *Oauth2IdentityAuditDataMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "sso",
		Name:      "Oauth2Identity",
	}
}

func (m *Oauth2IdentityAuditDataMapper) ToProperties(oauth2IdentityAuditData *Oauth2IdentityAuditData) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_CreatedBy := oauth2IdentityAuditData.CreatedBy

	if var_CreatedBy != nil {
		var var_CreatedBy_mapped *structpb.Value

		var var_CreatedBy_err error
		var_CreatedBy_mapped, var_CreatedBy_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_CreatedBy)
		if var_CreatedBy_err != nil {
			panic(var_CreatedBy_err)
		}
		properties["createdBy"] = var_CreatedBy_mapped
	}

	var_UpdatedBy := oauth2IdentityAuditData.UpdatedBy

	if var_UpdatedBy != nil {
		var var_UpdatedBy_mapped *structpb.Value

		var var_UpdatedBy_err error
		var_UpdatedBy_mapped, var_UpdatedBy_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_UpdatedBy)
		if var_UpdatedBy_err != nil {
			panic(var_UpdatedBy_err)
		}
		properties["updatedBy"] = var_UpdatedBy_mapped
	}

	var_CreatedOn := oauth2IdentityAuditData.CreatedOn

	if var_CreatedOn != nil {
		var var_CreatedOn_mapped *structpb.Value

		var var_CreatedOn_err error
		var_CreatedOn_mapped, var_CreatedOn_err = types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(*var_CreatedOn)
		if var_CreatedOn_err != nil {
			panic(var_CreatedOn_err)
		}
		properties["createdOn"] = var_CreatedOn_mapped
	}

	var_UpdatedOn := oauth2IdentityAuditData.UpdatedOn

	if var_UpdatedOn != nil {
		var var_UpdatedOn_mapped *structpb.Value

		var var_UpdatedOn_err error
		var_UpdatedOn_mapped, var_UpdatedOn_err = types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(*var_UpdatedOn)
		if var_UpdatedOn_err != nil {
			panic(var_UpdatedOn_err)
		}
		properties["updatedOn"] = var_UpdatedOn_mapped
	}
	return properties
}

func (m *Oauth2IdentityAuditDataMapper) FromProperties(properties map[string]*structpb.Value) *Oauth2IdentityAuditData {
	var s = m.New()
	if properties["createdBy"] != nil && properties["createdBy"].AsInterface() != nil {

		var_CreatedBy := properties["createdBy"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_CreatedBy)

		if err != nil {
			panic(err)
		}

		var_CreatedBy_mapped := new(string)
		*var_CreatedBy_mapped = val.(string)

		s.CreatedBy = var_CreatedBy_mapped
	}
	if properties["updatedBy"] != nil && properties["updatedBy"].AsInterface() != nil {

		var_UpdatedBy := properties["updatedBy"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_UpdatedBy)

		if err != nil {
			panic(err)
		}

		var_UpdatedBy_mapped := new(string)
		*var_UpdatedBy_mapped = val.(string)

		s.UpdatedBy = var_UpdatedBy_mapped
	}
	if properties["createdOn"] != nil && properties["createdOn"].AsInterface() != nil {

		var_CreatedOn := properties["createdOn"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_CreatedOn)

		if err != nil {
			panic(err)
		}

		var_CreatedOn_mapped := new(time.Time)
		*var_CreatedOn_mapped = val.(time.Time)

		s.CreatedOn = var_CreatedOn_mapped
	}
	if properties["updatedOn"] != nil && properties["updatedOn"].AsInterface() != nil {

		var_UpdatedOn := properties["updatedOn"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_UpdatedOn)

		if err != nil {
			panic(err)
		}

		var_UpdatedOn_mapped := new(time.Time)
		*var_UpdatedOn_mapped = val.(time.Time)

		s.UpdatedOn = var_UpdatedOn_mapped
	}
	return s
}

func (m *Oauth2IdentityAuditDataMapper) ToUnstructured(oauth2IdentityAuditData *Oauth2IdentityAuditData) unstructured.Unstructured {
	var properties unstructured.Unstructured = make(unstructured.Unstructured)

	var_CreatedBy := oauth2IdentityAuditData.CreatedBy

	if var_CreatedBy != nil {
		var var_CreatedBy_mapped interface{}

		var_CreatedBy_mapped = *var_CreatedBy
		properties["createdBy"] = var_CreatedBy_mapped
	}

	var_UpdatedBy := oauth2IdentityAuditData.UpdatedBy

	if var_UpdatedBy != nil {
		var var_UpdatedBy_mapped interface{}

		var_UpdatedBy_mapped = *var_UpdatedBy
		properties["updatedBy"] = var_UpdatedBy_mapped
	}

	var_CreatedOn := oauth2IdentityAuditData.CreatedOn

	if var_CreatedOn != nil {
		var var_CreatedOn_mapped interface{}

		var_CreatedOn_mapped = *var_CreatedOn
		properties["createdOn"] = var_CreatedOn_mapped
	}

	var_UpdatedOn := oauth2IdentityAuditData.UpdatedOn

	if var_UpdatedOn != nil {
		var var_UpdatedOn_mapped interface{}

		var_UpdatedOn_mapped = *var_UpdatedOn
		properties["updatedOn"] = var_UpdatedOn_mapped
	}

	return properties
}
